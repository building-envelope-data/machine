- hosts: localhost
  connection: local

  handlers:
    - name: Restart Docker
      become: yes
      service:
        name: docker
        state: restarted

    - name: Reload Monit
      become: yes
      service:
        name: monit
        state: reloaded

    - name: Send test mail as root
      become: yes
      shell: echo "Test mail as root user from new/updated MSTMP at" `hostname` | mail -s "Test SMTP `hostname`" root

    - name: Send test mail as cloud
      shell: echo "Test mail as cloud user from new/updated MSTMP at" `hostname` | mail -s "Test SMTP `hostname`" cloud

  pre_tasks:
    - name: Update package information
      become: yes
      apt:
        update_cache: yes
      changed_when: false

    - name: Install access control list utilities (needed to escalate privileges, see https://github.com/ansible/ansible/issues/16052)
      become: yes
      package:
        name: acl
        state: present

  tasks:
    - name: Bash completion
      block:
        - name: Install Bash completion
          become: yes
          package:
            name: bash-completion
            state: present

        # Inspired by https://stackoverflow.com/questions/40316836/update-bashrc-with-virtualenv-info-using-ansible/40317125#40317125
        # The comment also mentions an alternative better solution that uses a `~/.bashrc.d` directory.
        - name: Source Bash completion scripts in `~/.bashrc`
          blockinfile:
            dest: '{{ ansible_env.HOME }}/.bashrc'
            block: |
              for file in /etc/bash_completion.d/* ; do
                  source "$file"
              done
            marker: '# {mark} ANSIBLE MANAGED BLOCK - bash-completion'
            insertbefore: BOF
            create: yes

    - name: Upgrades
      block:
        # Inspired by https://wiki.debian.org/UnattendedUpgrades
        # and https://askubuntu.com/questions/1305955/ansible-dpkg-reconfigure-plow-unattended-upgrades-stopped-while-running/1323117#1323117
        - name: Install `unattended-upgrades`
          become: yes
          package:
            name: unattended-upgrades
            state: present

        - name: Install `apt-listchanges`
          become: yes
          package:
            name: apt-listchanges
            state: present

        - name: Configure Debian to auto install security updates
          become: yes
          debconf: name=unattended-upgrades question=unattended-upgrades/enable_auto_updates vtype=boolean value='true'

        - name: Activate unattended upgrades
          become: yes
          command:
            cmd: dpkg-reconfigure --force noninteractive unattended-upgrades
            creates: /etc/apt/apt.conf.d/20auto-upgrades

    - name: Install GNU Make
      become: yes
      package:
        name: make
        state: present

    - name: Hard disk management
      block:
      - name: Install Small Computer System Interface (SCSI) tools
        # Provides `rescan-scsi-bus.sh` used by `make scan`.
        become: yes
        package:
          name: scsitools
          state: present

      # See https://opensource.com/article/18/11/partition-format-drive-linux
      - name: Install parted to partition hard disks
        become: yes
        package:
          name: parted
          state: present

      - name: Install ext2/ext3/ext4 file system utilities to format hard disks
        become: yes
        package:
          name: e2fsprogs
          state: present

    - name: Install Apache 2 utils to manage passwords for HTTP Basic Authentication using htpasswd
      become: yes
      package:
        name: apache2-utils
        state: present

    - name: Install `moreutils` as it includes `chronic` that we use to cure Cron's chronic email problem
      # For details on the problem see https://habilis.net/cronic/
      become: yes
      package:
        name: moreutils
        state: present

    - name: Install and configure `msmtp` to be used by Cron and other services to send emails
      vars:
        from_email_address: 'server@{{ lookup("env", "NON_WWW_PRODUCTION_HOST") }}'
        email_address: '{{ lookup("env", "EMAIL_ADDRESS") }}'
        smtp_host: '{{ lookup("env", "SMTP_HOST") }}'
        smtp_port: '{{ lookup("env", "SMTP_PORT") }}'
      block:
        - name: Uninstall `mailutils` which includes GNU `mail`
          # The problem with GNU `mail` combined with `msmtp` is that aliases
          # in `/etc/aliases` are ignored. For example, when sending an email
          # by running `echo 'body' | mail -s 'subject' root`, the recipient
          # address is `root@hostname` instead of whatever email address is
          # given in `/etc/aliases` for `root`.
          become: yes
          package:
            name: mailutils
            state: absent

        - name: Install `bsd-mailx` which provides the `mail` command
          # An alternative would be `s-nail`
          become: yes
          package:
            name: bsd-mailx
            state: present

        - name: Install `msmtp` to send emails from mail user agents
          # For details see https://wiki.debian.org/msmtp
          # The manual is published under https://marlam.de/msmtp/msmtp.html
          # We do not use `sSMTP` because it is unmaintained according to https://wiki.debian.org/sSMTP
          become: yes
          package:
            name: msmtp
            state: present

        - name: Install `msmtp-mta` to symbolically link `/usr/sbin/sendmail` to `msmtp` that other software can use to send mail
          become: yes
          package:
            name: msmtp-mta
            state: present

        - name: Copy `mail.rc` configuration file
          become: yes
          template:
            src: mail.rc.j2
            dest: /etc/mail.rc
            owner: root
            group: root
            mode: 0644
          notify:
            - Send test mail as root
            - Send test mail as cloud

        - name: Copy system-wide `mstprc` configuration file
          become: yes
          vars:
            # The system-wide logfile must be `/var/log/msmtp` according to
            # msmtp's AppArmor configuration `/etc/apparmor.d/usr.bin.msmtp`
            msmtp_logfile: /var/log/msmtp
          template:
            src: msmtprc.j2
            dest: /etc/msmtprc
            owner: root
            group: root
            mode: 0644
          notify: Send test mail as root

        - name: Copy user-specific `mstprc` configuration file
          vars:
            # The user-specific logfile must be `~/.msmtp*.log` according to
            # msmtp's AppArmor configuration `/etc/apparmor.d/usr.bin.msmtp`
            msmtp_logfile: ~/.msmtp.log
          template:
            src: msmtprc.j2
            dest: ~/.msmtprc
            mode: 0644
          notify: Send test mail as cloud

        - name: Copy `aliases` configuration file
          become: yes
          template:
            src: aliases.j2
            dest: /etc/aliases
            owner: root
            group: root
            mode: 0644
          notify:
            - Send test mail as root
            - Send test mail as cloud

        - name: Flush handlers
          meta: flush_handlers

    - name: Configure Cron
      block:
        - name: Add paths to environment variable `PATH` for root's crontab
          become: yes
          cronvar:
            name: PATH
            value: /usr/local/bin/:/usr/bin:/bin
            state: present

        - name: Add paths to environment variable `PATH` for user's crontab
          cronvar:
            name: PATH
            value: /usr/local/bin/:/usr/bin:/bin
            state: present

        - name: Backup database
          cron:
            name: database-backup
            special_time: daily
            job: 'chronic make --directory=/app/machine backup-database'

        - name: Vacuum `journald`
          become: yes
          cron:
            name: journald-vacuuming
            special_time: daily
            job: 'chronic make --directory=/app/machine vacuum-journald'

        - name: Renew Transport Layer Security (TLS) certificates needed for the `S` in `HTTPS`
          cron:
            name: tls-renewal
            special_time: daily
            job: 'chronic make --directory=/app/machine renew-tls'

        - name: Set periodic docker system prune
          # See https://docs.docker.com/config/pruning/#prune-everything
          cron:
            name: docker-prune
            special_time: daily
            job: 'chronic make --directory=/app/machine prune-docker'

    - name: Monitor system with Monit
      # https://mmonit.com/monit/
      vars:
        host: '{{ lookup("env", "NON_WWW_PRODUCTION_HOST") }}'
        email_address: '{{ lookup("env", "EMAIL_ADDRESS") }}'
        smtp_host: '{{ lookup("env", "SMTP_HOST") }}'
        smtp_port: '{{ lookup("env", "SMTP_PORT") }}'
      block:
        - name: Add Debian backports
          # https://backports.debian.org/
          become: yes
          apt_repository:
            repo: deb [arch=amd64] http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main
            state: present

        - name: Install Monit
          become: yes
          package:
            name: monit
            state: present

        - name: Configure Monit
          become: yes
          template:
            src: monitrc.j2
            dest: /etc/monit/monitrc
            owner: root
            group: root
            mode: 0600
          notify:
            - Reload Monit

        - name: Flush handlers
          meta: flush_handlers

    - name: Docker
      # Inspired by https://ops.tips/blog/docker-ansible-role/
      become: yes
      block:
        - name: Add Docker dependencies
          package:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
            state: present

        - name: Add Docker key
          apt_key:
            url: https://download.docker.com/linux/debian/gpg
            id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
            state: present

        - name: Docker Community Edition
          block:
            - name: Add Docker repository
              apt_repository:
                repo: deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
                state: present
            - name: Docker Engine, containerd, and Docker Compose
              package:
                name:
                  - docker-ce
                  - docker-ce-cli
                  - containerd.io
                  - docker-compose-plugin
                state: present

        - name: Prepare default daemon configuration
          # For a list of options see
          # https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file
          copy:
            src: ./docker-daemon.json
            dest: /etc/docker/daemon.json
          notify:
            - Restart Docker

        - name: Add users to docker group
          user:
            name: '{{ item }}'
            groups: docker
            append: yes
          with_items:
            - cloud

        - name: Enable Docker systemd service
          service:
            name: docker
            enabled: yes
            state: started

        - name: Flush handlers
          meta: flush_handlers
