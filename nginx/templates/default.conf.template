proxy_redirect          off;
proxy_set_header        Host $host;
proxy_set_header        X-Real-IP $remote_addr;
proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header        X-Forwarded-Proto $scheme;

proxy_connect_timeout   90;
proxy_send_timeout      90;
proxy_read_timeout      90;
proxy_buffer_size       128k;
proxy_buffers           4 256k;
proxy_busy_buffers_size 256k;

ssl_certificate /etc/letsencrypt/live/buildingenvelopedata.org/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/buildingenvelopedata.org/privkey.pem;
include /etc/letsencrypt/options-ssl-nginx.conf;
ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

# Enable HSTS
add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload" always;
# Avoid click-jacking attacks: https://developer.mozilla.org/en-US/docs/Web/Security/Types_of_attacks#click-jacking
add_header X-Frame-Options DENY;
# Secure from MIME-type sniffing: https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1#mime-type-sniffing
add_header X-Content-Type-Options nosniff;

server {
    listen *:80;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen *:443 ssl;
    server_name ${STAGING_HOST};
    server_tokens off;

    auth_basic "Restricted Area";
    auth_basic_user_file /etc/apache2/.htpasswd;
    location / {
        proxy_pass http://host.docker.internal:${STAGING_HTTP_PORT};
    }
}

server {
    listen *:443 ssl;
    server_name ${PRODUCTION_HOST};
    server_tokens off;

    location / {
        proxy_pass http://host.docker.internal:${PRODUCTION_HTTP_PORT};
    }
}

# For the redirection from non-www to www see
# http://nginx.org/en/docs/http/converting_rewrite_rules.html
server {
    server_name ${NON_WWW_PRODUCTION_HOST};
    return 301 $scheme://${PRODUCTION_HOST}$request_uri;
}
